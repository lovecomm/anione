doctype html
html(lang="en")#anione-dev-html
	head
		title= "Anione Development"
		meta(charset='UTF-8')
		script(src="https://code.jquery.com/jquery-3.1.1.js" integrity="sha256-16cdPddA6VdVInumRGo6IbivbERE8p7CQR3HzTBuELA=" crossorigin="anonymous")
		script(src="https://s0.2mdn.net/ads/studio/cached_libs/tweenmax_2.1.2_min.js")
		script.
			!{scrubber}
		style(type="text/css").
			html#anione-dev-html,
			body#anione-dev-body {
				height: 100%;
				width: 100%;
			}

			body#anione-dev-body {
				background-color: #666;
				display: flex;
				margin: 0;
			}

			body#anione-dev-body > #nav {
				width: 250px;
				background: #003a6d;
				box-shadow:  0 20px #333;
				display: flex;
				flex-direction: column;
			}

			body#anione-dev-body > #nav > div > button {
				width: 100%;
				border-radius: 0;
				border: none;
				background: rgba(0, 0, 0, 0);
				color: white;
				padding: 20px 5px;
				font-size: 16px;
				border-bottom: 1px solid rgba(255, 255, 255, 0.75);
				transition: background 0.3s ease;
				outline: none !important;
				cursor: pointer;
			}

			body#anione-dev-body > #nav > div > button:first-of-type { border-top: 1px solid rgba(255, 255, 255, 0.5);}

			body#anione-dev-body > #nav > div > button:hover { background: #00529c; }

			body#anione-dev-body > #nav > div#title {
				text-align: center;
				color: white;
				font-size: 22px;
				text-transform: uppercase;
				padding: 40px 5px 40px;
				font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
				background: #001A31;
			}

			body#anione-dev-body > #view {
				width: calc(100% - 250px);
				display: flex;
				justify-content: center;
				flex-direction: column;
				align-items: center;
			}

			body#anione-dev-body > #view > #banner-wrapper {
				padding: 20px;
				display: flex;
				flex-direction: column;
				align-items: center;
			}

			body#anione-dev-body > #view > #banner-wrapper .warning {
				max-width: 270px;
				color: black;
				background-color: rgba(255, 255, 255, 0.5);
				border: 1px solid red;
				padding: 15px;
				font-family: sans-serif;
			}

			body#anione-dev-body > #view > #scrubber {
				width: 85 %;
				text-align: center;
				margin: 40px 0;
			}

			body#anione-dev-body > #view > #scrubber polygon,
			body#anione-dev-body > #view > #scrubber rect { fill: white !important; }
			body#anione-dev-body > #view > #scrubber > div:last-of-type { background-color: white !important; }
	body#anione-dev-body
		div#nav
			each banner in banners
				| <div><button data-link="banners/#{banner}">#{banner.split("/")[0].split(".")[0]}</button></div>
		div#view
			div#banner-wrapper
			div#scrubber
		script.
			$(document).ready(function() {
				var banners = $("#nav").find("button");
				var destination = $("#banner-wrapper");
				var scrubber = $("#scrubber");
				var cookie_is_set = document.cookie.match(/^(.*;)?\s*anione_current_size\s*=\s*[^;]+(.*)?$/);

				window.getCookie = function(name) {
					match = document.cookie.match(new RegExp(name + '=([^;]+)'));
					if (match) return match[1];
				}

				if (!cookie_is_set) {
					document.cookie = "anione_current_size=" + getBannerSize(banners[0]);
					handleAjax($(banners[0]).attr("data-link"));
				} else {
					handleAjax("banners/" + getCookie("anione_current_size") + ".html");
				}

				$(banners).on("click", function() {
					var link = $(this).attr("data-link");
					document.cookie = "anione_current_size=" + getBannerSize(this);
					handleAjax.call(this, link);
				});

				function getBannerSize (banner) {
					return $(banner).attr("data-link").split("/")[1].split(".html")[0];
				}

				// Source: http://stackoverflow.com/questions/7718935/load-scripts-asynchronously
				function loadScript(src, callback)
				{
					var s,
							r,
							t;
					r = false;
					s = document.createElement('script');
					s.type = 'text/javascript';
					s.src = src;
					s.onload = s.onreadystatechange = function() {
						if ( !r && (!this.readyState || this.readyState == 'complete') )
						{
							r = true;
							callback();
						}
					};
					t = document.getElementsByTagName('script')[0];
					t.parentNode.insertBefore(s, t);
				}

				var recursiveScriptLoad = function (scripts_array, callback) {
					if (scripts_array.length > 0) { // make sure there is an item in the array
						loadScript(scripts_array[0], function () {
							scripts_array.shift();
							if (scripts_array.length > 0) { // if there are more items in the array after removing the first item, recall the function, else call the callback
								recursiveScriptLoad(scripts_array, callback)
							} else {
								callback();
							}
						})
					} else {
						callback();
					}
				}

				function handleAjax (link) {
					$.ajax({
						type: "GET",
						url: link,
						dataFilter: dataFilter,
						success: function (response) {
							$(destination).text("");
							$(scrubber).text("");

							recursiveScriptLoad(response.src_scripts, function() {
								$(destination).append(response.href_styles)
								$(destination).append(response.styles);
								$(destination).append(response.markup);
								window.banner = new Function(response.scripts)();
								handleScrubber();
							})
						},
						error: function (response) {
							console.error("Error in getting banner, ", response);
						}
					});
				}

				function dataFilter (response) {
					var styles = response.match(/<style data-anione="styles".*?>[\s\S]*?<\/style>/ig)[0];
					var href_styles_match = response.match(/<link.*href="([\s\S]*?)".*?>/ig);
					var href_styles = "";
					var scripts_regex = /<script data-anione="scripts".*?>([\s\S]*?)<\/script>/ig;
					var scripts = scripts_regex.exec(response)[1];
					scripts = scripts.replace("(function() { // ANIONE: main timeline function", "return (function() { // ANIONE: main timeline function");
					scripts = scripts.replace("tl // ANIONE: main timeline", "return tl // ANIONE: main timeline")
					var has_timeline = /[^tl // ANIONE: main timeline][1-9]/.test(scripts); // we just have to know if the timeline has any duration... so really we just need to find a number after the start of the timeline. This is obviously hackish... potential problems include if there are any other code after the timeline that includes numbers, or if someone comments out the only timeline method that contains numbers/time.
					var src_scripts_regex = /<script src="([\s\S]*?)"><\/script>/ig;
					var src_scripts = [];
					var markup = response.match(/<a data-anione="markup".*?>[\s\S]*?<\/a>/ig)[0];
					markup = markup.replace(/\.\.\/assets\//ig, "assets/");

					var a_src;
					while (a_src = src_scripts_regex.exec(response)) {
						src_scripts.push(a_src[1])
					}

					if (href_styles_match) {
						for (var i = 0; i <= href_styles_match.length; i++) {
							var style = href_styles_match[i];
							if (style) {
								href_styles += style;
							}
						}
					}

					if (!has_timeline) {
						markup = "<p class='warning'>No timeline found. After you start adding methods to the greensock timeline in your banner, this message will go away. If it does not, then there was a problem finding any duration of time on your timeline.</p>" + markup
						console.log(markup)
					}

					return {
						styles: styles,
						scripts: has_timeline === true ? scripts : "",
						markup: markup,
						src_scripts: src_scripts,
						href_styles: href_styles,
					};
				}

				function handleScrubber () {
					if (window.banner) {
						var slider = new GSAPTLSlider(window.banner, "scrubber", {
							width: 300
						});
					}
				}
			});
